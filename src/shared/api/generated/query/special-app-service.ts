/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * special-backend.proto
 * OpenAPI spec version: version not set
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  RpcStatus,
  SpecialAppServiceCreateOrder200,
  SpecialAppServiceCreateUser200,
  SpecialAppServiceCreateUserEvent200,
  SpecialAppServiceDeleteUserEvent200,
  SpecialAppServiceGetEventsParams,
  SpecialAppServiceGetItemsParams,
  SpecialAppServiceGetOrdersParams,
  SpecialAppServiceGetUserEventsParams,
  SpecialAppServiceUpdateOrderBody,
  SpecialAppServiceUpdateUserEventBody,
  SpecialAppV1CreateOrderRequest,
  SpecialAppV1CreateUserEventRequest,
  SpecialAppV1GetEventInfoResponse,
  SpecialAppV1GetEventsResponse,
  SpecialAppV1GetItemInfoResponse,
  SpecialAppV1GetItemsResponse,
  SpecialAppV1GetOrderInfoResponse,
  SpecialAppV1GetOrdersResponse,
  SpecialAppV1GetUserEventInfoResponse,
  SpecialAppV1GetUserEventsResponse,
  SpecialAppV1GetUserInfoResponse,
  SpecialAppV1UpdateUserRequest,
} from "../model";

import { baseApiRequest } from "../../config/baseRequest";

export const specialAppServiceGetEvents = (
  signal?: AbortSignal
) => {
  return baseApiRequest<SpecialAppV1GetEventsResponse>({
    url: `/v1/events`,
    method: "GET",
    signal,
  });
};

export const getSpecialAppServiceGetEventsQueryKey = (
  params?: SpecialAppServiceGetEventsParams
) => {
  return [`/v1/events`, ...(params ? [params] : [])] as const;
};

export const getSpecialAppServiceGetEventsQueryOptions = <
  TData = Awaited<ReturnType<typeof specialAppServiceGetEvents>>,
  TError = RpcStatus,
>(
  params?: SpecialAppServiceGetEventsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetEvents>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpecialAppServiceGetEventsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof specialAppServiceGetEvents>>> = ({
    signal,
  }) => specialAppServiceGetEvents(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof specialAppServiceGetEvents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpecialAppServiceGetEventsQueryResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceGetEvents>>
>;
export type SpecialAppServiceGetEventsQueryError = RpcStatus;

export function useSpecialAppServiceGetEvents<
  TData = Awaited<ReturnType<typeof specialAppServiceGetEvents>>,
  TError = RpcStatus,
>(
  params: undefined | SpecialAppServiceGetEventsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetEvents>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetEvents>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetEvents>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetEvents<
  TData = Awaited<ReturnType<typeof specialAppServiceGetEvents>>,
  TError = RpcStatus,
>(
  params?: SpecialAppServiceGetEventsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetEvents>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetEvents>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetEvents>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetEvents<
  TData = Awaited<ReturnType<typeof specialAppServiceGetEvents>>,
  TError = RpcStatus,
>(
  params?: SpecialAppServiceGetEventsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetEvents>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpecialAppServiceGetEvents<
  TData = Awaited<ReturnType<typeof specialAppServiceGetEvents>>,
  TError = RpcStatus,
>(
  params?: SpecialAppServiceGetEventsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetEvents>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpecialAppServiceGetEventsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const specialAppServiceGetEventInfo = (id: string, signal?: AbortSignal) => {
  return baseApiRequest<SpecialAppV1GetEventInfoResponse>({
    url: `/v1/events/${id}`,
    method: "GET",
    signal,
  });
};

export const getSpecialAppServiceGetEventInfoQueryKey = (id?: string) => {
  return [`/v1/events/${id}`] as const;
};

export const getSpecialAppServiceGetEventInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof specialAppServiceGetEventInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetEventInfo>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpecialAppServiceGetEventInfoQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof specialAppServiceGetEventInfo>>> = ({
    signal,
  }) => specialAppServiceGetEventInfo(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetEventInfo>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type SpecialAppServiceGetEventInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceGetEventInfo>>
>;
export type SpecialAppServiceGetEventInfoQueryError = RpcStatus;

export function useSpecialAppServiceGetEventInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetEventInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetEventInfo>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetEventInfo>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetEventInfo>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetEventInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetEventInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetEventInfo>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetEventInfo>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetEventInfo>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetEventInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetEventInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetEventInfo>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpecialAppServiceGetEventInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetEventInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetEventInfo>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpecialAppServiceGetEventInfoQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const specialAppServiceGetItems = (
  signal?: AbortSignal
) => {
  return baseApiRequest<SpecialAppV1GetItemsResponse>({
    url: `/v1/items`,
    method: "GET",
    signal,
  });
};

export const getSpecialAppServiceGetItemsQueryKey = (params?: SpecialAppServiceGetItemsParams) => {
  return [`/v1/items`, ...(params ? [params] : [])] as const;
};

export const getSpecialAppServiceGetItemsQueryOptions = <
  TData = Awaited<ReturnType<typeof specialAppServiceGetItems>>,
  TError = RpcStatus,
>(
  params?: SpecialAppServiceGetItemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetItems>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpecialAppServiceGetItemsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof specialAppServiceGetItems>>> = ({
    signal,
  }) => specialAppServiceGetItems(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof specialAppServiceGetItems>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpecialAppServiceGetItemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceGetItems>>
>;
export type SpecialAppServiceGetItemsQueryError = RpcStatus;

export function useSpecialAppServiceGetItems<
  TData = Awaited<ReturnType<typeof specialAppServiceGetItems>>,
  TError = RpcStatus,
>(
  params: undefined | SpecialAppServiceGetItemsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetItems>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetItems>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetItems>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetItems<
  TData = Awaited<ReturnType<typeof specialAppServiceGetItems>>,
  TError = RpcStatus,
>(
  params?: SpecialAppServiceGetItemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetItems>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetItems>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetItems>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetItems<
  TData = Awaited<ReturnType<typeof specialAppServiceGetItems>>,
  TError = RpcStatus,
>(
  params?: SpecialAppServiceGetItemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetItems>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpecialAppServiceGetItems<
  TData = Awaited<ReturnType<typeof specialAppServiceGetItems>>,
  TError = RpcStatus,
>(
  params?: SpecialAppServiceGetItemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetItems>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpecialAppServiceGetItemsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const specialAppServiceGetItemInfo = (id: string, signal?: AbortSignal) => {
  return baseApiRequest<SpecialAppV1GetItemInfoResponse>({
    url: `/v1/items/${id}`,
    method: "GET",
    signal,
  });
};

export const getSpecialAppServiceGetItemInfoQueryKey = (id?: string) => {
  return [`/v1/items/${id}`] as const;
};

export const getSpecialAppServiceGetItemInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpecialAppServiceGetItemInfoQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>> = ({
    signal,
  }) => specialAppServiceGetItemInfo(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type SpecialAppServiceGetItemInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>
>;
export type SpecialAppServiceGetItemInfoQueryError = RpcStatus;

export function useSpecialAppServiceGetItemInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetItemInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetItemInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpecialAppServiceGetItemInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpecialAppServiceGetItemInfoQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const specialAppServiceGetOrders = (
  signal?: AbortSignal
) => {
  return baseApiRequest<SpecialAppV1GetOrdersResponse>({
    url: `/v1/orders`,
    method: "GET",
    signal,
  });
};

export const getSpecialAppServiceGetOrdersQueryKey = (
  params?: SpecialAppServiceGetOrdersParams
) => {
  return [`/v1/orders`, ...(params ? [params] : [])] as const;
};

export const getSpecialAppServiceGetOrdersQueryOptions = <
  TData = Awaited<ReturnType<typeof specialAppServiceGetOrders>>,
  TError = RpcStatus,
>(
  params?: SpecialAppServiceGetOrdersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetOrders>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpecialAppServiceGetOrdersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof specialAppServiceGetOrders>>> = ({
    signal,
  }) => specialAppServiceGetOrders(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof specialAppServiceGetOrders>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpecialAppServiceGetOrdersQueryResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceGetOrders>>
>;
export type SpecialAppServiceGetOrdersQueryError = RpcStatus;

export function useSpecialAppServiceGetOrders<
  TData = Awaited<ReturnType<typeof specialAppServiceGetOrders>>,
  TError = RpcStatus,
>(
  params: undefined | SpecialAppServiceGetOrdersParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetOrders>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetOrders>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetOrders>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetOrders<
  TData = Awaited<ReturnType<typeof specialAppServiceGetOrders>>,
  TError = RpcStatus,
>(
  params?: SpecialAppServiceGetOrdersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetOrders>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetOrders>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetOrders>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetOrders<
  TData = Awaited<ReturnType<typeof specialAppServiceGetOrders>>,
  TError = RpcStatus,
>(
  params?: SpecialAppServiceGetOrdersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetOrders>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpecialAppServiceGetOrders<
  TData = Awaited<ReturnType<typeof specialAppServiceGetOrders>>,
  TError = RpcStatus,
>(
  params?: SpecialAppServiceGetOrdersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetOrders>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpecialAppServiceGetOrdersQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const specialAppServiceCreateOrder = (
  specialAppV1CreateOrderRequest: SpecialAppV1CreateOrderRequest,
  signal?: AbortSignal
) => {
  return baseApiRequest<SpecialAppServiceCreateOrder200>({
    url: `/v1/orders`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: specialAppV1CreateOrderRequest,
    signal,
  });
};

export const getSpecialAppServiceCreateOrderMutationOptions = <
  TError = RpcStatus,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof specialAppServiceCreateOrder>>,
    TError,
    { data: SpecialAppV1CreateOrderRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof specialAppServiceCreateOrder>>,
  TError,
  { data: SpecialAppV1CreateOrderRequest },
  TContext
> => {
  const mutationKey = ["specialAppServiceCreateOrder"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof specialAppServiceCreateOrder>>,
    { data: SpecialAppV1CreateOrderRequest }
  > = (props) => {
    const { data } = props ?? {};

    return specialAppServiceCreateOrder(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SpecialAppServiceCreateOrderMutationResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceCreateOrder>>
>;
export type SpecialAppServiceCreateOrderMutationBody = SpecialAppV1CreateOrderRequest;
export type SpecialAppServiceCreateOrderMutationError = RpcStatus;

export const useSpecialAppServiceCreateOrder = <TError = RpcStatus, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof specialAppServiceCreateOrder>>,
      TError,
      { data: SpecialAppV1CreateOrderRequest },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof specialAppServiceCreateOrder>>,
  TError,
  { data: SpecialAppV1CreateOrderRequest },
  TContext
> => {
  const mutationOptions = getSpecialAppServiceCreateOrderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const specialAppServiceGetOrderInfo = (id: string, signal?: AbortSignal) => {
  return baseApiRequest<SpecialAppV1GetOrderInfoResponse>({
    url: `/v1/orders/${id}`,
    method: "GET",
    signal,
  });
};

export const getSpecialAppServiceGetOrderInfoQueryKey = (id?: string) => {
  return [`/v1/orders/${id}`] as const;
};

export const getSpecialAppServiceGetOrderInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpecialAppServiceGetOrderInfoQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>> = ({
    signal,
  }) => specialAppServiceGetOrderInfo(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type SpecialAppServiceGetOrderInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>
>;
export type SpecialAppServiceGetOrderInfoQueryError = RpcStatus;

export function useSpecialAppServiceGetOrderInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetOrderInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetOrderInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpecialAppServiceGetOrderInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpecialAppServiceGetOrderInfoQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const specialAppServiceUpdateOrder = (
  id: string,
  specialAppServiceUpdateOrderBody: SpecialAppServiceUpdateOrderBody
) => {
  return baseApiRequest<SpecialAppV1GetOrderInfoResponse>({
    url: `/v1/orders/${id}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: specialAppServiceUpdateOrderBody,
  });
};

export const getSpecialAppServiceUpdateOrderMutationOptions = <
  TError = RpcStatus,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof specialAppServiceUpdateOrder>>,
    TError,
    { id: string; data: SpecialAppServiceUpdateOrderBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof specialAppServiceUpdateOrder>>,
  TError,
  { id: string; data: SpecialAppServiceUpdateOrderBody },
  TContext
> => {
  const mutationKey = ["specialAppServiceUpdateOrder"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof specialAppServiceUpdateOrder>>,
    { id: string; data: SpecialAppServiceUpdateOrderBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return specialAppServiceUpdateOrder(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SpecialAppServiceUpdateOrderMutationResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceUpdateOrder>>
>;
export type SpecialAppServiceUpdateOrderMutationBody = SpecialAppServiceUpdateOrderBody;
export type SpecialAppServiceUpdateOrderMutationError = RpcStatus;

export const useSpecialAppServiceUpdateOrder = <TError = RpcStatus, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof specialAppServiceUpdateOrder>>,
      TError,
      { id: string; data: SpecialAppServiceUpdateOrderBody },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof specialAppServiceUpdateOrder>>,
  TError,
  { id: string; data: SpecialAppServiceUpdateOrderBody },
  TContext
> => {
  const mutationOptions = getSpecialAppServiceUpdateOrderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const specialAppServiceGetUserEvents = (
  signal?: AbortSignal
) => {
  return baseApiRequest<SpecialAppV1GetUserEventsResponse>({
    url: `/v1/user_events`,
    method: "GET",
    signal,
  });
};

export const getSpecialAppServiceGetUserEventsQueryKey = (
  params?: SpecialAppServiceGetUserEventsParams
) => {
  return [`/v1/user_events`, ...(params ? [params] : [])] as const;
};

export const getSpecialAppServiceGetUserEventsQueryOptions = <
  TData = Awaited<ReturnType<typeof specialAppServiceGetUserEvents>>,
  TError = RpcStatus,
>(
  params?: SpecialAppServiceGetUserEventsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetUserEvents>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpecialAppServiceGetUserEventsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof specialAppServiceGetUserEvents>>> = ({
    signal,
  }) => specialAppServiceGetUserEvents(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof specialAppServiceGetUserEvents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpecialAppServiceGetUserEventsQueryResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceGetUserEvents>>
>;
export type SpecialAppServiceGetUserEventsQueryError = RpcStatus;

export function useSpecialAppServiceGetUserEvents<
  TData = Awaited<ReturnType<typeof specialAppServiceGetUserEvents>>,
  TError = RpcStatus,
>(
  params: undefined | SpecialAppServiceGetUserEventsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetUserEvents>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetUserEvents>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetUserEvents>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetUserEvents<
  TData = Awaited<ReturnType<typeof specialAppServiceGetUserEvents>>,
  TError = RpcStatus,
>(
  params?: SpecialAppServiceGetUserEventsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetUserEvents>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetUserEvents>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetUserEvents>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetUserEvents<
  TData = Awaited<ReturnType<typeof specialAppServiceGetUserEvents>>,
  TError = RpcStatus,
>(
  params?: SpecialAppServiceGetUserEventsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetUserEvents>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpecialAppServiceGetUserEvents<
  TData = Awaited<ReturnType<typeof specialAppServiceGetUserEvents>>,
  TError = RpcStatus,
>(
  params?: SpecialAppServiceGetUserEventsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetUserEvents>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpecialAppServiceGetUserEventsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const specialAppServiceCreateUserEvent = (
  specialAppV1CreateUserEventRequest: SpecialAppV1CreateUserEventRequest,
  signal?: AbortSignal
) => {
  return baseApiRequest<SpecialAppServiceCreateUserEvent200>({
    url: `/v1/user_events`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: specialAppV1CreateUserEventRequest,
    signal,
  });
};

export const getSpecialAppServiceCreateUserEventMutationOptions = <
  TError = RpcStatus,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof specialAppServiceCreateUserEvent>>,
    TError,
    { data: SpecialAppV1CreateUserEventRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof specialAppServiceCreateUserEvent>>,
  TError,
  { data: SpecialAppV1CreateUserEventRequest },
  TContext
> => {
  const mutationKey = ["specialAppServiceCreateUserEvent"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof specialAppServiceCreateUserEvent>>,
    { data: SpecialAppV1CreateUserEventRequest }
  > = (props) => {
    const { data } = props ?? {};

    return specialAppServiceCreateUserEvent(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SpecialAppServiceCreateUserEventMutationResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceCreateUserEvent>>
>;
export type SpecialAppServiceCreateUserEventMutationBody = SpecialAppV1CreateUserEventRequest;
export type SpecialAppServiceCreateUserEventMutationError = RpcStatus;

export const useSpecialAppServiceCreateUserEvent = <TError = RpcStatus, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof specialAppServiceCreateUserEvent>>,
      TError,
      { data: SpecialAppV1CreateUserEventRequest },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof specialAppServiceCreateUserEvent>>,
  TError,
  { data: SpecialAppV1CreateUserEventRequest },
  TContext
> => {
  const mutationOptions = getSpecialAppServiceCreateUserEventMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const specialAppServiceGetUserEventInfo = (id: string, signal?: AbortSignal) => {
  return baseApiRequest<SpecialAppV1GetUserEventInfoResponse>({
    url: `/v1/user_events/${id}`,
    method: "GET",
    signal,
  });
};

export const getSpecialAppServiceGetUserEventInfoQueryKey = (id?: string) => {
  return [`/v1/user_events/${id}`] as const;
};

export const getSpecialAppServiceGetUserEventInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof specialAppServiceGetUserEventInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetUserEventInfo>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpecialAppServiceGetUserEventInfoQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof specialAppServiceGetUserEventInfo>>> = ({
    signal,
  }) => specialAppServiceGetUserEventInfo(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof specialAppServiceGetUserEventInfo>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpecialAppServiceGetUserEventInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceGetUserEventInfo>>
>;
export type SpecialAppServiceGetUserEventInfoQueryError = RpcStatus;

export function useSpecialAppServiceGetUserEventInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetUserEventInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetUserEventInfo>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetUserEventInfo>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetUserEventInfo>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetUserEventInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetUserEventInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetUserEventInfo>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetUserEventInfo>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetUserEventInfo>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetUserEventInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetUserEventInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetUserEventInfo>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpecialAppServiceGetUserEventInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetUserEventInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetUserEventInfo>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpecialAppServiceGetUserEventInfoQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const specialAppServiceDeleteUserEvent = (id: string) => {
  return baseApiRequest<SpecialAppServiceDeleteUserEvent200>({
    url: `/v1/user_events/${id}`,
    method: "DELETE",
  });
};

export const getSpecialAppServiceDeleteUserEventMutationOptions = <
  TError = RpcStatus,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof specialAppServiceDeleteUserEvent>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof specialAppServiceDeleteUserEvent>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["specialAppServiceDeleteUserEvent"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof specialAppServiceDeleteUserEvent>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return specialAppServiceDeleteUserEvent(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type SpecialAppServiceDeleteUserEventMutationResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceDeleteUserEvent>>
>;

export type SpecialAppServiceDeleteUserEventMutationError = RpcStatus;

export const useSpecialAppServiceDeleteUserEvent = <TError = RpcStatus, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof specialAppServiceDeleteUserEvent>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof specialAppServiceDeleteUserEvent>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getSpecialAppServiceDeleteUserEventMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const specialAppServiceUpdateUserEvent = (
  id: string,
  specialAppServiceUpdateUserEventBody: SpecialAppServiceUpdateUserEventBody
) => {
  return baseApiRequest<SpecialAppV1GetUserEventInfoResponse>({
    url: `/v1/user_events/${id}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: specialAppServiceUpdateUserEventBody,
  });
};

export const getSpecialAppServiceUpdateUserEventMutationOptions = <
  TError = RpcStatus,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof specialAppServiceUpdateUserEvent>>,
    TError,
    { id: string; data: SpecialAppServiceUpdateUserEventBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof specialAppServiceUpdateUserEvent>>,
  TError,
  { id: string; data: SpecialAppServiceUpdateUserEventBody },
  TContext
> => {
  const mutationKey = ["specialAppServiceUpdateUserEvent"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof specialAppServiceUpdateUserEvent>>,
    { id: string; data: SpecialAppServiceUpdateUserEventBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return specialAppServiceUpdateUserEvent(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SpecialAppServiceUpdateUserEventMutationResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceUpdateUserEvent>>
>;
export type SpecialAppServiceUpdateUserEventMutationBody = SpecialAppServiceUpdateUserEventBody;
export type SpecialAppServiceUpdateUserEventMutationError = RpcStatus;

export const useSpecialAppServiceUpdateUserEvent = <TError = RpcStatus, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof specialAppServiceUpdateUserEvent>>,
      TError,
      { id: string; data: SpecialAppServiceUpdateUserEventBody },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof specialAppServiceUpdateUserEvent>>,
  TError,
  { id: string; data: SpecialAppServiceUpdateUserEventBody },
  TContext
> => {
  const mutationOptions = getSpecialAppServiceUpdateUserEventMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const specialAppServiceGetUser = (signal?: AbortSignal) => {
  return baseApiRequest<SpecialAppV1GetUserInfoResponse>({
    url: `/v1/users`,
    method: "GET",
    signal,
  });
};

export const getSpecialAppServiceGetUserQueryKey = () => {
  return [`/v1/users`] as const;
};

export const getSpecialAppServiceGetUserQueryOptions = <
  TData = Awaited<ReturnType<typeof specialAppServiceGetUser>>,
  TError = RpcStatus,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetUser>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpecialAppServiceGetUserQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof specialAppServiceGetUser>>> = ({
    signal,
  }) => specialAppServiceGetUser(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof specialAppServiceGetUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpecialAppServiceGetUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceGetUser>>
>;
export type SpecialAppServiceGetUserQueryError = RpcStatus;

export function useSpecialAppServiceGetUser<
  TData = Awaited<ReturnType<typeof specialAppServiceGetUser>>,
  TError = RpcStatus,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetUser>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetUser>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetUser>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetUser<
  TData = Awaited<ReturnType<typeof specialAppServiceGetUser>>,
  TError = RpcStatus,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetUser>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetUser>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetUser>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetUser<
  TData = Awaited<ReturnType<typeof specialAppServiceGetUser>>,
  TError = RpcStatus,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetUser>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpecialAppServiceGetUser<
  TData = Awaited<ReturnType<typeof specialAppServiceGetUser>>,
  TError = RpcStatus,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof specialAppServiceGetUser>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpecialAppServiceGetUserQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const specialAppServiceCreateUser = (signal?: AbortSignal) => {
  return baseApiRequest<SpecialAppServiceCreateUser200>({
    url: `/v1/users`,
    method: "POST",
    signal,
  });
};

export const getSpecialAppServiceCreateUserMutationOptions = <
  TError = RpcStatus,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof specialAppServiceCreateUser>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof specialAppServiceCreateUser>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["specialAppServiceCreateUser"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof specialAppServiceCreateUser>>,
    void
  > = () => {
    return specialAppServiceCreateUser();
  };

  return { mutationFn, ...mutationOptions };
};

export type SpecialAppServiceCreateUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceCreateUser>>
>;

export type SpecialAppServiceCreateUserMutationError = RpcStatus;

export const useSpecialAppServiceCreateUser = <TError = RpcStatus, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof specialAppServiceCreateUser>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof specialAppServiceCreateUser>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getSpecialAppServiceCreateUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const specialAppServiceUpdateUser = (
  specialAppV1UpdateUserRequest: SpecialAppV1UpdateUserRequest
) => {
  return baseApiRequest<SpecialAppV1GetUserInfoResponse>({
    url: `/v1/users`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: specialAppV1UpdateUserRequest,
  });
};

export const getSpecialAppServiceUpdateUserMutationOptions = <
  TError = RpcStatus,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof specialAppServiceUpdateUser>>,
    TError,
    { data: SpecialAppV1UpdateUserRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof specialAppServiceUpdateUser>>,
  TError,
  { data: SpecialAppV1UpdateUserRequest },
  TContext
> => {
  const mutationKey = ["specialAppServiceUpdateUser"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof specialAppServiceUpdateUser>>,
    { data: SpecialAppV1UpdateUserRequest }
  > = (props) => {
    const { data } = props ?? {};

    return specialAppServiceUpdateUser(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SpecialAppServiceUpdateUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceUpdateUser>>
>;
export type SpecialAppServiceUpdateUserMutationBody = SpecialAppV1UpdateUserRequest;
export type SpecialAppServiceUpdateUserMutationError = RpcStatus;

export const useSpecialAppServiceUpdateUser = <TError = RpcStatus, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof specialAppServiceUpdateUser>>,
      TError,
      { data: SpecialAppV1UpdateUserRequest },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof specialAppServiceUpdateUser>>,
  TError,
  { data: SpecialAppV1UpdateUserRequest },
  TContext
> => {
  const mutationOptions = getSpecialAppServiceUpdateUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
