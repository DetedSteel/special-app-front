/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * special-backend.proto
 * OpenAPI spec version: version not set
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  RpcStatus,
  SpecialAppServiceCreateUser200,
  SpecialAppServiceDeleteUserIvent200,
  SpecialAppServiceUpdateOrderBody,
  SpecialAppServiceUpdateUserIventBody,
  SpecialAppV1CreateOrderRequest,
  SpecialAppV1CreateUserIventRequest,
  SpecialAppV1GetItemInfoResponse,
  SpecialAppV1GetItemsResponse,
  SpecialAppV1GetIventInfoResponse,
  SpecialAppV1GetIventsResponse,
  SpecialAppV1GetOrderInfoResponse,
  SpecialAppV1GetOrdersResponse,
  SpecialAppV1GetUserInfoResponse,
  SpecialAppV1GetUserIventInfoResponse,
  SpecialAppV1GetUserIventsResponse,
  SpecialAppV1UpdateUserRequest,
} from "../model";

import { baseApiRequest } from "../../config/baseRequest";

export const specialAppServiceGetItems = (signal?: AbortSignal) => {
  return baseApiRequest<SpecialAppV1GetItemsResponse>({
    url: `/v1/items`,
    method: "GET",
    signal,
  });
};

export const getSpecialAppServiceGetItemsQueryKey = () => {
  return [`/v1/items`] as const;
};

export const getSpecialAppServiceGetItemsQueryOptions = <
  TData = Awaited<ReturnType<typeof specialAppServiceGetItems>>,
  TError = RpcStatus,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof specialAppServiceGetItems>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSpecialAppServiceGetItemsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof specialAppServiceGetItems>>
  > = ({ signal }) => specialAppServiceGetItems(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof specialAppServiceGetItems>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpecialAppServiceGetItemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceGetItems>>
>;
export type SpecialAppServiceGetItemsQueryError = RpcStatus;

export function useSpecialAppServiceGetItems<
  TData = Awaited<ReturnType<typeof specialAppServiceGetItems>>,
  TError = RpcStatus,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetItems>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetItems>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetItems>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetItems<
  TData = Awaited<ReturnType<typeof specialAppServiceGetItems>>,
  TError = RpcStatus,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetItems>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetItems>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetItems>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetItems<
  TData = Awaited<ReturnType<typeof specialAppServiceGetItems>>,
  TError = RpcStatus,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetItems>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpecialAppServiceGetItems<
  TData = Awaited<ReturnType<typeof specialAppServiceGetItems>>,
  TError = RpcStatus,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetItems>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpecialAppServiceGetItemsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const specialAppServiceGetItemInfo = (
  id: string,
  signal?: AbortSignal,
) => {
  return baseApiRequest<SpecialAppV1GetItemInfoResponse>({
    url: `/v1/items/${id}`,
    method: "GET",
    signal,
  });
};

export const getSpecialAppServiceGetItemInfoQueryKey = (id?: string) => {
  return [`/v1/items/${id}`] as const;
};

export const getSpecialAppServiceGetItemInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSpecialAppServiceGetItemInfoQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>
  > = ({ signal }) => specialAppServiceGetItemInfo(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpecialAppServiceGetItemInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>
>;
export type SpecialAppServiceGetItemInfoQueryError = RpcStatus;

export function useSpecialAppServiceGetItemInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetItemInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetItemInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpecialAppServiceGetItemInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetItemInfo>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpecialAppServiceGetItemInfoQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const specialAppServiceGetIvents = (signal?: AbortSignal) => {
  return baseApiRequest<SpecialAppV1GetIventsResponse>({
    url: `/v1/ivents`,
    method: "GET",
    signal,
  });
};

export const getSpecialAppServiceGetIventsQueryKey = () => {
  return [`/v1/ivents`] as const;
};

export const getSpecialAppServiceGetIventsQueryOptions = <
  TData = Awaited<ReturnType<typeof specialAppServiceGetIvents>>,
  TError = RpcStatus,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof specialAppServiceGetIvents>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSpecialAppServiceGetIventsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof specialAppServiceGetIvents>>
  > = ({ signal }) => specialAppServiceGetIvents(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof specialAppServiceGetIvents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpecialAppServiceGetIventsQueryResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceGetIvents>>
>;
export type SpecialAppServiceGetIventsQueryError = RpcStatus;

export function useSpecialAppServiceGetIvents<
  TData = Awaited<ReturnType<typeof specialAppServiceGetIvents>>,
  TError = RpcStatus,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetIvents>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetIvents>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetIvents>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetIvents<
  TData = Awaited<ReturnType<typeof specialAppServiceGetIvents>>,
  TError = RpcStatus,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetIvents>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetIvents>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetIvents>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetIvents<
  TData = Awaited<ReturnType<typeof specialAppServiceGetIvents>>,
  TError = RpcStatus,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetIvents>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpecialAppServiceGetIvents<
  TData = Awaited<ReturnType<typeof specialAppServiceGetIvents>>,
  TError = RpcStatus,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetIvents>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpecialAppServiceGetIventsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const specialAppServiceGetIventInfo = (
  id: string,
  signal?: AbortSignal,
) => {
  return baseApiRequest<SpecialAppV1GetIventInfoResponse>({
    url: `/v1/ivents/${id}`,
    method: "GET",
    signal,
  });
};

export const getSpecialAppServiceGetIventInfoQueryKey = (id?: string) => {
  return [`/v1/ivents/${id}`] as const;
};

export const getSpecialAppServiceGetIventInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof specialAppServiceGetIventInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetIventInfo>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSpecialAppServiceGetIventInfoQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof specialAppServiceGetIventInfo>>
  > = ({ signal }) => specialAppServiceGetIventInfo(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof specialAppServiceGetIventInfo>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpecialAppServiceGetIventInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceGetIventInfo>>
>;
export type SpecialAppServiceGetIventInfoQueryError = RpcStatus;

export function useSpecialAppServiceGetIventInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetIventInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetIventInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetIventInfo>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetIventInfo>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetIventInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetIventInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetIventInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetIventInfo>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetIventInfo>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetIventInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetIventInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetIventInfo>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpecialAppServiceGetIventInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetIventInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetIventInfo>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpecialAppServiceGetIventInfoQueryOptions(
    id,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const specialAppServiceGetOrders = (signal?: AbortSignal) => {
  return baseApiRequest<SpecialAppV1GetOrdersResponse>({
    url: `/v1/orders`,
    method: "GET",
    signal,
  });
};

export const getSpecialAppServiceGetOrdersQueryKey = () => {
  return [`/v1/orders`] as const;
};

export const getSpecialAppServiceGetOrdersQueryOptions = <
  TData = Awaited<ReturnType<typeof specialAppServiceGetOrders>>,
  TError = RpcStatus,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof specialAppServiceGetOrders>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSpecialAppServiceGetOrdersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof specialAppServiceGetOrders>>
  > = ({ signal }) => specialAppServiceGetOrders(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof specialAppServiceGetOrders>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpecialAppServiceGetOrdersQueryResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceGetOrders>>
>;
export type SpecialAppServiceGetOrdersQueryError = RpcStatus;

export function useSpecialAppServiceGetOrders<
  TData = Awaited<ReturnType<typeof specialAppServiceGetOrders>>,
  TError = RpcStatus,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetOrders>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetOrders>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetOrders>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetOrders<
  TData = Awaited<ReturnType<typeof specialAppServiceGetOrders>>,
  TError = RpcStatus,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetOrders>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetOrders>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetOrders>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetOrders<
  TData = Awaited<ReturnType<typeof specialAppServiceGetOrders>>,
  TError = RpcStatus,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetOrders>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpecialAppServiceGetOrders<
  TData = Awaited<ReturnType<typeof specialAppServiceGetOrders>>,
  TError = RpcStatus,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetOrders>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpecialAppServiceGetOrdersQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const specialAppServiceCreateOrder = (
  specialAppV1CreateOrderRequest: SpecialAppV1CreateOrderRequest,
  signal?: AbortSignal,
) => {
  return baseApiRequest<SpecialAppV1GetOrderInfoResponse>({
    url: `/v1/orders`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: specialAppV1CreateOrderRequest,
    signal,
  });
};

export const getSpecialAppServiceCreateOrderMutationOptions = <
  TError = RpcStatus,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof specialAppServiceCreateOrder>>,
    TError,
    { data: SpecialAppV1CreateOrderRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof specialAppServiceCreateOrder>>,
  TError,
  { data: SpecialAppV1CreateOrderRequest },
  TContext
> => {
  const mutationKey = ["specialAppServiceCreateOrder"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof specialAppServiceCreateOrder>>,
    { data: SpecialAppV1CreateOrderRequest }
  > = (props) => {
    const { data } = props ?? {};

    return specialAppServiceCreateOrder(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SpecialAppServiceCreateOrderMutationResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceCreateOrder>>
>;
export type SpecialAppServiceCreateOrderMutationBody =
  SpecialAppV1CreateOrderRequest;
export type SpecialAppServiceCreateOrderMutationError = RpcStatus;

export const useSpecialAppServiceCreateOrder = <
  TError = RpcStatus,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof specialAppServiceCreateOrder>>,
      TError,
      { data: SpecialAppV1CreateOrderRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof specialAppServiceCreateOrder>>,
  TError,
  { data: SpecialAppV1CreateOrderRequest },
  TContext
> => {
  const mutationOptions =
    getSpecialAppServiceCreateOrderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const specialAppServiceGetOrderInfo = (
  id: string,
  signal?: AbortSignal,
) => {
  return baseApiRequest<SpecialAppV1GetOrderInfoResponse>({
    url: `/v1/orders/${id}`,
    method: "GET",
    signal,
  });
};

export const getSpecialAppServiceGetOrderInfoQueryKey = (id?: string) => {
  return [`/v1/orders/${id}`] as const;
};

export const getSpecialAppServiceGetOrderInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSpecialAppServiceGetOrderInfoQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>
  > = ({ signal }) => specialAppServiceGetOrderInfo(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpecialAppServiceGetOrderInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>
>;
export type SpecialAppServiceGetOrderInfoQueryError = RpcStatus;

export function useSpecialAppServiceGetOrderInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetOrderInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetOrderInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpecialAppServiceGetOrderInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetOrderInfo>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpecialAppServiceGetOrderInfoQueryOptions(
    id,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const specialAppServiceUpdateOrder = (
  id: string,
  specialAppServiceUpdateOrderBody: SpecialAppServiceUpdateOrderBody,
) => {
  return baseApiRequest<SpecialAppV1GetOrderInfoResponse>({
    url: `/v1/orders/${id}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: specialAppServiceUpdateOrderBody,
  });
};

export const getSpecialAppServiceUpdateOrderMutationOptions = <
  TError = RpcStatus,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof specialAppServiceUpdateOrder>>,
    TError,
    { id: string; data: SpecialAppServiceUpdateOrderBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof specialAppServiceUpdateOrder>>,
  TError,
  { id: string; data: SpecialAppServiceUpdateOrderBody },
  TContext
> => {
  const mutationKey = ["specialAppServiceUpdateOrder"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof specialAppServiceUpdateOrder>>,
    { id: string; data: SpecialAppServiceUpdateOrderBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return specialAppServiceUpdateOrder(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SpecialAppServiceUpdateOrderMutationResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceUpdateOrder>>
>;
export type SpecialAppServiceUpdateOrderMutationBody =
  SpecialAppServiceUpdateOrderBody;
export type SpecialAppServiceUpdateOrderMutationError = RpcStatus;

export const useSpecialAppServiceUpdateOrder = <
  TError = RpcStatus,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof specialAppServiceUpdateOrder>>,
      TError,
      { id: string; data: SpecialAppServiceUpdateOrderBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof specialAppServiceUpdateOrder>>,
  TError,
  { id: string; data: SpecialAppServiceUpdateOrderBody },
  TContext
> => {
  const mutationOptions =
    getSpecialAppServiceUpdateOrderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const specialAppServiceGetUserIvents = (signal?: AbortSignal) => {
  return baseApiRequest<SpecialAppV1GetUserIventsResponse>({
    url: `/v1/user_ivents`,
    method: "GET",
    signal,
  });
};

export const getSpecialAppServiceGetUserIventsQueryKey = () => {
  return [`/v1/user_ivents`] as const;
};

export const getSpecialAppServiceGetUserIventsQueryOptions = <
  TData = Awaited<ReturnType<typeof specialAppServiceGetUserIvents>>,
  TError = RpcStatus,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof specialAppServiceGetUserIvents>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSpecialAppServiceGetUserIventsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof specialAppServiceGetUserIvents>>
  > = ({ signal }) => specialAppServiceGetUserIvents(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof specialAppServiceGetUserIvents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpecialAppServiceGetUserIventsQueryResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceGetUserIvents>>
>;
export type SpecialAppServiceGetUserIventsQueryError = RpcStatus;

export function useSpecialAppServiceGetUserIvents<
  TData = Awaited<ReturnType<typeof specialAppServiceGetUserIvents>>,
  TError = RpcStatus,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetUserIvents>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetUserIvents>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetUserIvents>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetUserIvents<
  TData = Awaited<ReturnType<typeof specialAppServiceGetUserIvents>>,
  TError = RpcStatus,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetUserIvents>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetUserIvents>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetUserIvents>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetUserIvents<
  TData = Awaited<ReturnType<typeof specialAppServiceGetUserIvents>>,
  TError = RpcStatus,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetUserIvents>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpecialAppServiceGetUserIvents<
  TData = Awaited<ReturnType<typeof specialAppServiceGetUserIvents>>,
  TError = RpcStatus,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetUserIvents>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpecialAppServiceGetUserIventsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const specialAppServiceCreateUserIvent = (
  specialAppV1CreateUserIventRequest: SpecialAppV1CreateUserIventRequest,
  signal?: AbortSignal,
) => {
  return baseApiRequest<SpecialAppV1GetUserIventInfoResponse>({
    url: `/v1/user_ivents`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: specialAppV1CreateUserIventRequest,
    signal,
  });
};

export const getSpecialAppServiceCreateUserIventMutationOptions = <
  TError = RpcStatus,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof specialAppServiceCreateUserIvent>>,
    TError,
    { data: SpecialAppV1CreateUserIventRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof specialAppServiceCreateUserIvent>>,
  TError,
  { data: SpecialAppV1CreateUserIventRequest },
  TContext
> => {
  const mutationKey = ["specialAppServiceCreateUserIvent"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof specialAppServiceCreateUserIvent>>,
    { data: SpecialAppV1CreateUserIventRequest }
  > = (props) => {
    const { data } = props ?? {};

    return specialAppServiceCreateUserIvent(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SpecialAppServiceCreateUserIventMutationResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceCreateUserIvent>>
>;
export type SpecialAppServiceCreateUserIventMutationBody =
  SpecialAppV1CreateUserIventRequest;
export type SpecialAppServiceCreateUserIventMutationError = RpcStatus;

export const useSpecialAppServiceCreateUserIvent = <
  TError = RpcStatus,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof specialAppServiceCreateUserIvent>>,
      TError,
      { data: SpecialAppV1CreateUserIventRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof specialAppServiceCreateUserIvent>>,
  TError,
  { data: SpecialAppV1CreateUserIventRequest },
  TContext
> => {
  const mutationOptions =
    getSpecialAppServiceCreateUserIventMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const specialAppServiceGetUserIventInfo = (
  id: string,
  signal?: AbortSignal,
) => {
  return baseApiRequest<SpecialAppV1GetUserIventInfoResponse>({
    url: `/v1/user_ivents/${id}`,
    method: "GET",
    signal,
  });
};

export const getSpecialAppServiceGetUserIventInfoQueryKey = (id?: string) => {
  return [`/v1/user_ivents/${id}`] as const;
};

export const getSpecialAppServiceGetUserIventInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof specialAppServiceGetUserIventInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetUserIventInfo>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSpecialAppServiceGetUserIventInfoQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof specialAppServiceGetUserIventInfo>>
  > = ({ signal }) => specialAppServiceGetUserIventInfo(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof specialAppServiceGetUserIventInfo>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpecialAppServiceGetUserIventInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceGetUserIventInfo>>
>;
export type SpecialAppServiceGetUserIventInfoQueryError = RpcStatus;

export function useSpecialAppServiceGetUserIventInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetUserIventInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetUserIventInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetUserIventInfo>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetUserIventInfo>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetUserIventInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetUserIventInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetUserIventInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetUserIventInfo>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetUserIventInfo>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetUserIventInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetUserIventInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetUserIventInfo>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpecialAppServiceGetUserIventInfo<
  TData = Awaited<ReturnType<typeof specialAppServiceGetUserIventInfo>>,
  TError = RpcStatus,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetUserIventInfo>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpecialAppServiceGetUserIventInfoQueryOptions(
    id,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const specialAppServiceDeleteUserIvent = (id: string) => {
  return baseApiRequest<SpecialAppServiceDeleteUserIvent200>({
    url: `/v1/user_ivents/${id}`,
    method: "DELETE",
  });
};

export const getSpecialAppServiceDeleteUserIventMutationOptions = <
  TError = RpcStatus,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof specialAppServiceDeleteUserIvent>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof specialAppServiceDeleteUserIvent>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["specialAppServiceDeleteUserIvent"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof specialAppServiceDeleteUserIvent>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return specialAppServiceDeleteUserIvent(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type SpecialAppServiceDeleteUserIventMutationResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceDeleteUserIvent>>
>;

export type SpecialAppServiceDeleteUserIventMutationError = RpcStatus;

export const useSpecialAppServiceDeleteUserIvent = <
  TError = RpcStatus,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof specialAppServiceDeleteUserIvent>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof specialAppServiceDeleteUserIvent>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getSpecialAppServiceDeleteUserIventMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const specialAppServiceUpdateUserIvent = (
  id: string,
  specialAppServiceUpdateUserIventBody: SpecialAppServiceUpdateUserIventBody,
) => {
  return baseApiRequest<SpecialAppV1GetUserIventInfoResponse>({
    url: `/v1/user_ivents/${id}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: specialAppServiceUpdateUserIventBody,
  });
};

export const getSpecialAppServiceUpdateUserIventMutationOptions = <
  TError = RpcStatus,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof specialAppServiceUpdateUserIvent>>,
    TError,
    { id: string; data: SpecialAppServiceUpdateUserIventBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof specialAppServiceUpdateUserIvent>>,
  TError,
  { id: string; data: SpecialAppServiceUpdateUserIventBody },
  TContext
> => {
  const mutationKey = ["specialAppServiceUpdateUserIvent"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof specialAppServiceUpdateUserIvent>>,
    { id: string; data: SpecialAppServiceUpdateUserIventBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return specialAppServiceUpdateUserIvent(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SpecialAppServiceUpdateUserIventMutationResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceUpdateUserIvent>>
>;
export type SpecialAppServiceUpdateUserIventMutationBody =
  SpecialAppServiceUpdateUserIventBody;
export type SpecialAppServiceUpdateUserIventMutationError = RpcStatus;

export const useSpecialAppServiceUpdateUserIvent = <
  TError = RpcStatus,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof specialAppServiceUpdateUserIvent>>,
      TError,
      { id: string; data: SpecialAppServiceUpdateUserIventBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof specialAppServiceUpdateUserIvent>>,
  TError,
  { id: string; data: SpecialAppServiceUpdateUserIventBody },
  TContext
> => {
  const mutationOptions =
    getSpecialAppServiceUpdateUserIventMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const specialAppServiceGetUser = (signal?: AbortSignal) => {
  return baseApiRequest<SpecialAppV1GetUserInfoResponse>({
    url: `/v1/users`,
    method: "GET",
    signal,
  });
};

export const getSpecialAppServiceGetUserQueryKey = () => {
  return [`/v1/users`] as const;
};

export const getSpecialAppServiceGetUserQueryOptions = <
  TData = Awaited<ReturnType<typeof specialAppServiceGetUser>>,
  TError = RpcStatus,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof specialAppServiceGetUser>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSpecialAppServiceGetUserQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof specialAppServiceGetUser>>
  > = ({ signal }) => specialAppServiceGetUser(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof specialAppServiceGetUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpecialAppServiceGetUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceGetUser>>
>;
export type SpecialAppServiceGetUserQueryError = RpcStatus;

export function useSpecialAppServiceGetUser<
  TData = Awaited<ReturnType<typeof specialAppServiceGetUser>>,
  TError = RpcStatus,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetUser>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetUser>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetUser>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetUser<
  TData = Awaited<ReturnType<typeof specialAppServiceGetUser>>,
  TError = RpcStatus,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetUser>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialAppServiceGetUser>>,
          TError,
          Awaited<ReturnType<typeof specialAppServiceGetUser>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpecialAppServiceGetUser<
  TData = Awaited<ReturnType<typeof specialAppServiceGetUser>>,
  TError = RpcStatus,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetUser>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpecialAppServiceGetUser<
  TData = Awaited<ReturnType<typeof specialAppServiceGetUser>>,
  TError = RpcStatus,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof specialAppServiceGetUser>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpecialAppServiceGetUserQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const specialAppServiceCreateUser = (signal?: AbortSignal) => {
  return baseApiRequest<SpecialAppServiceCreateUser200>({
    url: `/v1/users`,
    method: "POST",
    signal,
  });
};

export const getSpecialAppServiceCreateUserMutationOptions = <
  TError = RpcStatus,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof specialAppServiceCreateUser>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof specialAppServiceCreateUser>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["specialAppServiceCreateUser"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof specialAppServiceCreateUser>>,
    void
  > = () => {
    return specialAppServiceCreateUser();
  };

  return { mutationFn, ...mutationOptions };
};

export type SpecialAppServiceCreateUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceCreateUser>>
>;

export type SpecialAppServiceCreateUserMutationError = RpcStatus;

export const useSpecialAppServiceCreateUser = <
  TError = RpcStatus,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof specialAppServiceCreateUser>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof specialAppServiceCreateUser>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getSpecialAppServiceCreateUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const specialAppServiceUpdateUser = (
  specialAppV1UpdateUserRequest: SpecialAppV1UpdateUserRequest,
) => {
  return baseApiRequest<SpecialAppV1GetUserInfoResponse>({
    url: `/v1/users`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: specialAppV1UpdateUserRequest,
  });
};

export const getSpecialAppServiceUpdateUserMutationOptions = <
  TError = RpcStatus,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof specialAppServiceUpdateUser>>,
    TError,
    { data: SpecialAppV1UpdateUserRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof specialAppServiceUpdateUser>>,
  TError,
  { data: SpecialAppV1UpdateUserRequest },
  TContext
> => {
  const mutationKey = ["specialAppServiceUpdateUser"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof specialAppServiceUpdateUser>>,
    { data: SpecialAppV1UpdateUserRequest }
  > = (props) => {
    const { data } = props ?? {};

    return specialAppServiceUpdateUser(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SpecialAppServiceUpdateUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof specialAppServiceUpdateUser>>
>;
export type SpecialAppServiceUpdateUserMutationBody =
  SpecialAppV1UpdateUserRequest;
export type SpecialAppServiceUpdateUserMutationError = RpcStatus;

export const useSpecialAppServiceUpdateUser = <
  TError = RpcStatus,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof specialAppServiceUpdateUser>>,
      TError,
      { data: SpecialAppV1UpdateUserRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof specialAppServiceUpdateUser>>,
  TError,
  { data: SpecialAppV1UpdateUserRequest },
  TContext
> => {
  const mutationOptions =
    getSpecialAppServiceUpdateUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
